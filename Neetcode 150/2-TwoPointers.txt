.................................................................................................................
Easy
.................................................................................................................
Two Pointers:

Palindrome

class Solution:
    def isPalindrome(self, s: str) -> bool:
        #change all to lowercase
        s = s.lower()
        #string to store only alphanum
        mystr = ''
        #store only alphanum
        for i in s:
            if i.isalnum() and i != ' ':
                mystr+=i

        #two pointers
        left = 0
        right = len(mystr) - 1
        #check left and right pointers are same and iterate
        while left < right:
            if mystr[left] != mystr[right]:
                return False
            left = left + 1
            right = right - 1
        #true if all same
        return True
..................................................................................................................
Two Sum II - Input Array is Sorted

Using Binary Search:

class Solution:
    

    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        #Binary Search function to find the complement 
        def binarySearch(arr,low,high,target):
            if low <= high:
                mid = (low + high) // 2
                if target == arr[mid]:
                    return mid
                elif target > arr[mid]:
                    return binarySearch(arr,mid + 1,high,target)
                else:
                    return binarySearch(arr,low,mid - 1,target)
            else:
                return -1

        #Iterate the array along with its index
        for index,i in enumerate(numbers):
            #find complement using binarySearch
            complement = binarySearch(numbers,0,len(numbers)-1,target-i)
            #if complement is present and isnt same as index
            if(complement != -1 and complement != index):
                result = [index + 1, complement +1]
                result.sort()
                #return result in sorted order
                return result
    
Using Two pointers:

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        left, right = 0, len(numbers) - 1

        #Left is lower than right
        while left < right:
            # calculate sum
            sum = numbers[left] + numbers[right]
            #if sum == target
            if sum == target:
                return [left+1,right+1]
            #increment left index if sum < target
            if sum < target:
                left = left + 1
            #decrement right index
            else:
                right = right - 1
.................................................................................................................
3sum -> Extremely tough for medium question

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()

        #iterate every element in nums with index
        for i,e in enumerate(nums):
            #skip if element is same (results in same combination)
            if i > 0 and e == nums[i-1]:
                continue
            
            #do two sum :)
            #l poinyer is current index + 1
            l,r = i+1,len(nums) - 1
            while(l < r):
                sum = e + nums[l] + nums[r]
                if sum == 0:
                    res.append([e,nums[l],nums[r]])
                    #dont repeat for same l
                    l = l + 1
                    while nums[l] == nums[l-1] and l < r :
                        l = l + 1
                elif sum < 0:
                    l = l + 1
                else:
                    r = r - 1 

        return res
..........................................................................................................................
Container with most water:

class Solution:
    def maxArea(self, height: List[int]) -> int:
        #function to calculate area
        def calArea(l,r,height):
            h = min(height[l],height[r])
            w = r - l
            return h * w
        
        #two pointer
        l,r = 0,len(height) - 1
        #intialize max
        res = calArea(l,r,height)

        #two pointer
        while l < r:
            #move the smaller element, update max area
            if height[l] > height[r]:
                r-=1
                subRes = calArea(l,r,height)
                res = max(res,subRes)
            elif height[l] < height[r]:
                l+=1
                subRes = calArea(l,r,height)
                res = max(res,subRes)
            #both same case
            else:
                l+=1
                r-=1
                subRes = calArea(l,r,height)
                res = max(res,subRes)
        return res

..................................................................................................................................

